# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: 
      - "main"
      - "develop"
    tags:
      - "v*.*.*"          # Dispara quando criar/mover tags no formato semver (ex: v1.2.3)
  pull_request:
    branches: 
      - "main"
      - "develop"
  #schedule:
    #- cron: "0 0 * * 0"   # Exemplo: roda todo domingo à meia-noite
  workflow_dispatch:      # Permite disparo manual pelo GitHub

jobs:
  ##################################################################
  # LINT (job roda em paralelo ao SAST)
  ##################################################################
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Instalar dependências
        run: npm install

      - name: Rodar Lint
        run: npm run lint
        # Exemplo de correção automática: 
        # run: npm run lint -- --fix

  ##################################################################
  # SAST (Security Analysis) - roda em paralelo ao LINT
  ##################################################################
  security:
    name: SAST Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Análise Estática de Segurança
        # Ajuste para a ferramenta que você utiliza (por exemplo: npm run sast, bandit, etc.)
        run: |
          echo "Rodando SAST..."
          # Exemplo: npm run sast
          # Exemplo: ./bin/sast-scan

  ##################################################################
  # TEST - depende de LINT e SAST
  ##################################################################
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: 
      - lint
      - security
    
    # Exemplo de matriz em Node.js, rode em múltiplas versões
    strategy:
      matrix:
        node-version: [14, 16, 18]

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Instalar dependências
        run: npm install

      - name: Executar testes unitários
        run: npm test

  ##################################################################
  # BUILD - depende de TEST
  ##################################################################
  build:
    name: Build & Release
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Instalar dependências
        run: npm install

      - name: Build da aplicação
        run: npm run build
        # Exemplo para TypeScript ou Webpack: 
        # run: npm run build -- --prod

      - name: Versão (Exemplo de uso semver)
        # Ajuste para a sua abordagem (ex: semantic-release, standard-version etc.)
        run: |
          echo "Gerando versão semântica (opcional) ..."
          # npx semantic-release ou npm run release etc.

  ##################################################################
  # DEPLOY STAGING
  # Executa se estiver na branch develop
  ##################################################################
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build

    # Define environment para staging (pode ter segredos específicos)
    environment:
      name: staging
      url: https://staging.example.com

    # Só executa se for a branch 'develop'
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Deploy para Staging
        env:
          # Exemplo de uso de secret
          DEPLOY_API_KEY: ${{ secrets.STAGING_DEPLOY_API_KEY }}
        run: |
          echo "Realizando deploy em STAGING..."
          # Exemplo: 
          # kubectl apply -f k8s/staging.yaml --token $DEPLOY_API_KEY
          # ou 
          # npm run deploy-staging
          # Ajuste conforme sua infra

  ##################################################################
  # DEPLOY PRODUÇÃO
  # Executa se for branch 'main' ou se for tag semver (refs/tags/vX.X.X)
  ##################################################################
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build

    # Define environment "production", com concurrency para evitar conflitos
    environment:
      name: production
      url: https://app.example.com

    concurrency: production-deploy

    # Filtra branch main OU tag semver (ex: v1.2.3)
    if: >
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Deploy para Produção
        env:
          DEPLOY_API_KEY: ${{ secrets.PROD_DEPLOY_API_KEY }}
          APP_ENV: "production"
        run: |
          echo "Realizando deploy em PRODUÇÃO..."
          # Exemplo de comando de deploy:
          # helm upgrade --install myapp chart/ --set apiKey=$DEPLOY_API_KEY
          # ou 
          # npm run deploy-production
